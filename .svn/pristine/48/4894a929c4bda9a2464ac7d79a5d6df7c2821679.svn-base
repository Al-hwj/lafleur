<?php

require_once ("../../util/fonctions.inc.php");

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-03 at 14:15:25.
 */
class fonctionTest extends PHPUnit_Framework_TestCase {

    /**
     * @var fonction
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new fonction;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers fonction::isConnecteAdmin
     * @todo   Implement testIsConnecteAdmin().
     */
    public function testIsConnecteAdmin() {
        $this->assertEquals(FALSE, $this->object->isConnecteAdmin());
    }
    
    public function testIsConnecteAdmin2() {
        $_SESSION['admin'] = 'admin';
        $this->assertEquals('admin', $this->object->isConnecteAdmin());
    }
    
    /**
     * @covers fonction::initPanier
     * @todo   Implement testInitPanier().
     */
    public function testInitPanier() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers fonction::supprimerPanier
     * @todo   Implement testSupprimerPanier().
     */
    public function testSupprimerPanier() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers fonction::ajouterAuPanier
     * @todo   Implement testAjouterAuPanier().
     */
    public function testAjouterAuPanier() {
        $_SESSION['produits'] = array('001', '002', '003', '004');
        $idProduit = '001';
        $this->assertEquals(TRUE, $this->object->ajouterAuPanier($idProduit));
    }
    
    public function testAjouterAuPanier2() {
        $_SESSION['produits'] = array('001', '002', '003', '004');
        $idProduit = '005';
        $this->assertEquals(FALSE, $this->object->ajouterAuPanier($idProduit));
    }

    /**
     * @covers fonction::getLesIdProduitsDuPanier
     * @todo   Implement testGetLesIdProduitsDuPanier().
     */
    public function testGetLesIdProduitsDuPanier() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers fonction::nbProduitsDuPanier
     * @todo   Implement testNbProduitsDuPanier().
     */
    public function testNbProduitsDuPanier() {
        $_SESSION['produits'] = array('001', '002', '003', '004', '005');
        $this->assertEquals(5, $this->object->nbProduitsDuPanier());
    }
    
    public function testNbProduitsDuPanier2() {
        $_SESSION['produits'] = array();
        $this->assertEquals(0, $this->object->nbProduitsDuPanier());
    }

    /**
     * @covers fonction::retirerDuPanier
     * @todo   Implement testRetirerDuPanier().
     */
    public function testRetirerDuPanier() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers fonction::estUnCp
     * @todo   Implement testEstUnCp().
     */
    public function testEstUnCp() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers fonction::estEntier
     * @todo   Implement testEstEntier().
     */
    public function testEstEntier() {
        $valeur = '005';
        $this->assertEquals(TRUE, $this->object->estEntier($valeur));
    }
    
    public function testEstEntier2() {
        $valeur = 'abc';
        $this->assertEquals(FALSE, $this->object->estEntier($valeur));
    }

    /**
     * @covers fonction::estUnMail
     * @todo   Implement testEstUnMail().
     */
    public function testEstUnMail() {
        $mail = 'abc@abc.fr';
        $this->assertEquals(1, $this->object->estUnMail($mail));
    }
    
    public function testEstUnMail2() {
        $mail = 'abc';
        $this->assertEquals(0, $this->object->estUnMail($mail));
    }

    /**
     * @covers fonction::getErreursSaisieCommande
     * @todo   Implement testGetErreursSaisieCommande().
     */
    public function testGetErreursSaisieCommande() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
